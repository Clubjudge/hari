function _h.sorted_set_merge(stream_key, nodes_ids, relation, direction, limit, from, step, result_type, h)
  local stream_count = 0
  local direction_index = (direction == 'out' and 3 or 2)

  for i, node_id in pairs(nodes_ids) do
    if i > 1 then
      stream_count = redis.call('zcard', stream_key)
    end

    local prune = true
    local fetch_count = step

    if tonumber(limit) == -1 or stream_count < tonumber(limit) then
      prune = false
      fetch_count = limit
    end

    local fetch_start = 0
    local digg = true

    while digg do
      local key = 'hari:'..node_id..':'..relation..':'..direction
      local rel_nodes_ids_and_scores = nil

      if from == '' then
        rel_nodes_ids_and_scores = redis.call('zrevrange', key, fetch_start, fetch_count, 'withscores')
      else
        rel_nodes_ids_and_scores = redis.call('zrevrangebyscore', key, '+inf', from,
          'withscores', 'limit', fetch_start, fetch_count)
      end

      local last_node_id = nil

      for i = 1, #rel_nodes_ids_and_scores, 2 do
        local score = rel_nodes_ids_and_scores[i + 1]
        last_node_id = _h.split(rel_nodes_ids_and_scores[i], ':')[direction_index]
        redis.call('zadd', stream_key, score, last_node_id)
      end

      if prune then
        redis.call('zremrangebyrank', stream_key, 0, fetch_count)

        local last_node_present = redis.call('zrank', stream_key, last_node_id)

        if last_node_present == false then
          digg = false
          fetch_start = fetch_start + fetch_count + 1
        end
      else
        digg = false
      end
    end
  end

  return _h.map(redis.call('zrevrange', stream_key, 0, -1), function(r) return 'hari:'..r end)
end
