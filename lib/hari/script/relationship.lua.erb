<%= locals_from_args %w(relation direction limit from step result_type return) %>

local <%= l(:result) %> = {}

<% if index == 1 %>
  <% if result_type == :count %>
    <%= l(:result) %> = _h.<%= backend %>_count(start_node_id, <%= l(:relation, :direction) %>, _h)
  <% elsif result_type == :nodes_ids %>
    <%= l(:result) %> = _h.<%= backend %>_fetch_nodes_ids(start_node_id, <%= l(:relation, :direction, :from, :limit) %>, _h)
  <% elsif result_type == :relations_ids %>
    <%= l(:result) %> = _h.<%= backend %>_fetch_relations_ids(start_node_id, <%= l(:relation, :direction, :from, :limit) %>, _h)
  <% elsif result_type == :nodes %>
    <%= l(:result) %> = _h.<%= backend %>_fetch_nodes_ids(start_node_id, <%= l(:relation, :direction, :from, :limit) %>, _h)
    <%= l(:result) %> = _h.map(<%= l(:result) %>, function(r) return 'hari:'..r end)

    if #<%= l(:result) %> > 0 then
      <%= l(:result) %> = redis.call('mget', unpack(<%= l(:result) %>))
    end
  <% end %>
<% else %>
  <%= l(:result) %> = _h.<%= backend %>_merge('<%= SecureRandom.hex(6) %>', <%= l(:result, index: (index - 1)) %>, <%= l(:relation, :direction, :limit, :from, :step, :result_type) %>, _h)

  <% if result_type == :nodes %>
    if #<%= l(:result) %> > 0 then
      <%= l(:result) %> = redis.call('mget', unpack(<%= l(:result) %>))
    end
  <% end %>
<% end %>

<% if result %>
  return <%= l(:result) %>
<% end %>
